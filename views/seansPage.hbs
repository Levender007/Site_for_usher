<div id ="EditMenu" hidden>
    <h2 id="EditHeader"></h2>
    <form name="EditForm" action="" method="post">
        <input type="hidden" name="id" id="id" value="0">
        <p>
            <label for="FilmName">Название фильма: </label>
            <input type="text" name="FilmName" id="FilmName">
        </p>
        <p>
            <label for="DateTime">Дата и время: </label>
            <input type="datetime-local" name="DateTime" id="DateTime">
        </p>
        <p>
            <label for="Duration">Продолжительность: </label>
            <input type="time" name="Duration" id="Duration">
        </p>
        <p>
            <label for="Hall">Название зала: </label>
            <select id="Hall" size="1">
            </select>
        </p>
        <p>
            <button type="submit" id="SubmitBtn">Отправить</button>
            <button type="reset" id="ResetBtn">Сбросить</button>
            <button name="UnselectBtn" id="UnselectBtn">Снять выбор</button>
        </p>
    </form>
</div>
<form name="AddForm" action="" method="get">
    <button id="AddBtn">Добавить сеанс</button>
</form>
<table>
    <thead><tr><th>Название фильма</th><th>Дата и время</th><th>Продолжительность</th><th>Название зала</th><th>Доступно билетов</th></tr></thead>
    <tbody></tbody>
</table>

<script>
    const editMenu = document.getElementById("EditMenu");
    const editHeader = document.getElementById("EditHeader");
    const addForm = document.forms["AddForm"];
    const form = document.forms["EditForm"];
    const select = document.querySelector("select");
    const tbody = document.querySelector("tbody");
    halls = new Map();

    async function GetHalls() {
        const res = await fetch("{{apiWay}}{{apiHalls}}", {
            method: "GET",
            headers: {"Accept": "application/json"}
        });
        if (res.ok === true) {
            const result = await res.json();
            result.forEach(hall => {
                halls[hall["ID"]] = hall["Name"];
                form.elements["Hall"].options[form.elements["Hall"].options.length] = new Option(hall["Name"], hall["ID"]);
            });
        }
    }

    async function GetSessions() {
        const today = new Date();
        const res = await fetch("{{apiWay}}{{apiSessions}}/fd/" + today.toISOString(), {
            method: "GET",
            headers: { "Accept": "application/json" }
        });
        if (res.ok === true) {
            const sessions = await res.json();
            sessions.forEach(session => {
                tbody.append(row(session));
            });
        }
    }

    async function GetSession(id) {
        const res = await fetch("{{apiWay}}{{apiSessions}}/" + id, {
            method: "GET",
            headers: { "Accept": "application/json" }
        });
        if (res.ok === true) {
            const session = await res.json();

            editHeader.textContent = "Редактирование сеанса";

            form.elements["id"].value = session["ID"];

            addForm.hidden = true;
            editMenu.hidden = false;
        }
    }

    async function CreateSession(film, date, duration, hallID) {
        const res = await fetch("{{apiWay}}{{apiSessions}}", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                film: film,
                date: date,
                duration: duration,
                hallID: hallID
            })
        });
        if (res.ok === true) {
            while(tbody.firstChild) {
                tbody.removeChild(tbody.firstChild);
            }
            await GetSessions();
        }
    }

    async function EditSession(id, film, date, duration, hallID) {
        const res = await fetch("{{apiWay}}{{apiSessions}}/" + id, {
            method: "PUT",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                film: film,
                date: date,
                duration: duration,
                hallID: hallID
            })
        });
        if (res.ok === true) {
            while(tbody.firstChild) {
                tbody.removeChild(tbody.firstChild);
            }
            await GetSessions();
        }
    }

    async function DeleteSession(id) {
        const res = await fetch("{{apiWay}}{{apiSessions}}/" + id, {
            method: "DELETE",
            headers: { "Accept": "application/json" }
        });
        if (res.ok === true) {
            document.querySelector(`tr[data-rowid="${id}"]`).remove();
        }
    }

    function reset() {
        addForm.hidden = false;
        editMenu.hidden = true;
        form.elements["id"].value = 0;
        form.reset();
        editHeader.textContent = "";
    }

    function row(session) {
        const tr = document.createElement("tr");
        tr.setAttribute("data-rowid", session["ID"]);

        const filmTd = document.createElement("td");
        filmTd.append(session["Film"]);
        tr.append(filmTd);

        const dateTd = document.createElement("td");
        const date = new Date(session["Date"]);
        dateTd.append(date.toString());
        tr.append(dateTd);

        const durationTd = document.createElement("td");
        durationTd.append(session["Duration"]);
        tr.append(durationTd);

        const hallTd = document.createElement("td");
        hallTd.append(halls[session["HallID"]]);
        tr.append(hallTd);

        const unsoldTd = document.createElement("td");
        unsoldTd.append(session["UnsoldTickets"]);
        tr.append(unsoldTd);

        const linksTd = document.createElement("td");

        const editLink = document.createElement("a");
        editLink.setAttribute("data-id", session["ID"]);
        editLink.setAttribute("class", "btn");
        editLink.setAttribute("href", "");
        editLink.append("Изменить");
        editLink.addEventListener("click", e => {
            e.preventDefault();
            GetSession(session["ID"]);
        });
        linksTd.append(editLink);

        const removeLink = document.createElement("a");
        removeLink.setAttribute("data-id", session["ID"]);
        removeLink.setAttribute("class", "btn");
        removeLink.setAttribute("href", "");
        removeLink.append("Удалить");
        removeLink.addEventListener("click", e => {
            e.preventDefault();
            DeleteSession(session["ID"]);
        });
        linksTd.append(removeLink);

        tr.appendChild(linksTd);

        return tr;
    }

    document.getElementById("AddBtn").addEventListener("click", e => {
        e.preventDefault();
        editHeader.textContent = "Создание сеанса";

        addForm.hidden = true;
        editMenu.hidden = false;
    });

    document.getElementById("UnselectBtn").addEventListener("click", e => {
        e.preventDefault();
        reset();
    });

    form.addEventListener("submit", e => {
        e.preventDefault();

        const id = form.elements["id"].value;
        const film = form.elements["FilmName"].value;
        const date = form.elements["DateTime"].value;
        const duration = form.elements["Duration"].value;
        const hallID = form.elements["Hall"].value;

        if(id == 0)
            CreateSession(film, date, duration, hallID);
        else
            EditSession(id, film, date, duration, hallID);

        reset();
    });

    GetHalls();
    GetSessions();
</script>